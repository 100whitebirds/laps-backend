name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t laps-app:latest .

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files to server
        run: |
          tar -czvf deploy.tar.gz * .github
          scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p /home/${{ secrets.SERVER_USER }}/laps-app && tar -xzvf /home/${{ secrets.SERVER_USER }}/deploy.tar.gz -C /home/${{ secrets.SERVER_USER }}/laps-app"

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /home/${{ secrets.SERVER_USER }}/laps-app && \
          cat > .env << EOF
          HTTP_PORT=8080
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_SSL_MODE=disable
          JWT_SIGNING_KEY=${{ secrets.JWT_SIGNING_KEY }}
          LOG_LEVEL=info
          EOF
          
          # Исправление Dockerfile если имя приложения заменено маскировкой
          if grep -q "\*\*\*" Dockerfile; then
            sed -i 's/o \*\*\* \./o laps \./g' Dockerfile
            sed -i 's|/app/\*\*\* \.|/app/laps \.|g' Dockerfile
            sed -i 's|\["./\*\*\*"\]|["./laps"]|g' Dockerfile
          fi
          
          # Сборка и запуск приложения
          sudo docker-compose down
          sudo docker-compose build
          sudo docker-compose up -d
          
          # Ожидание запуска и вывод логов
          sleep 10
          sudo docker-compose logs --tail=50"